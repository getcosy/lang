// Generated by CoffeeScript 1.4.0

(function(root, factory) {
  var protocol, _base, _ref, _ref1;
  if ("object" === typeof exports) {
    protocol = require('./protocol');
    module.exports = factory(protocol);
  } else if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
    define(['./protocol'], factory);
  } else {
    if ((_ref = root.cosy) == null) {
      root.cosy = {};
    }
    if ((_ref1 = (_base = root.cosy).lang) == null) {
      _base.lang = {};
    }
    root.cosy.lang.promise = factory(root.cosy.protocol);
  }
})(this, function(protocol) {
  "use strict";

  var IPromise, Promise, promise;
  IPromise = protocol.define('IPromise', ['when', 'Regester a callback with a deffered'], ['deliver', 'Resolve a deffered']);
  protocol.extend(IPromise, null, [
    'when', function(deffered, fn) {
      return fn(deffered);
    }
  ], ['deliver', function(deffered, val) {}]);
  protocol.extend(IPromise, "", [
    'when', function(deffered, fn) {
      return fn(deffered);
    }
  ], ['deliver', function(deffered, val) {}]);
  protocol.extend(IPromise, 1, [
    'when', function(deffered, fn) {
      return fn(deffered);
    }
  ], ['deliver', function(deffered, val) {}]);
  protocol.extend(IPromise, Object, [
    'when', function(deffered, fn) {
      return fn(deffered);
    }
  ], ['deliver', function(deffered, val) {}]);
  Promise = (function() {

    function Promise() {
      var listeners, realised, val;
      listeners = [];
      realised = false;
      val = null;
      this.addListener = function(fn) {
        if (realised) {
          return fn(val);
        }
        return listeners.push(fn);
      };
      this.realise = function(realisedVal) {
        var listener, _i, _len, _results;
        if (realised) {
          throw new Error('Already realised');
        }
        val = realisedVal;
        realised = true;
        _results = [];
        for (_i = 0, _len = listeners.length; _i < _len; _i++) {
          listener = listeners[_i];
          _results.push(listener(val));
        }
        return _results;
      };
      this.isRealised = function() {
        return realised;
      };
    }

    return Promise;

  })();
  protocol.extend(IPromise, Promise, [
    'when', function(prom, fn) {
      return prom.addListener(fn);
    }
  ], [
    'deliver', function(prom, val) {
      return prom.realise(val);
    }
  ]);
  return promise = {
    IPromise: IPromise,
    Promise: Promise
  };
});
