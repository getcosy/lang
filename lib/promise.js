// Generated by CoffeeScript 1.3.3
"use stict";

(function(root, factory) {
  var protocol, _base, _ref, _ref1;
  if ("object" === typeof exports) {
    protocol = require('./protocol');
    module.exports = factory(protocol);
  } else if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
    define(['./protocol'], factory);
  } else {
    if ((_ref = root.cosy) == null) {
      root.cosy = {};
    }
    if ((_ref1 = (_base = root.cosy).lang) == null) {
      _base.lang = {};
    }
    root.cosy.lang.promise = factory(root.cosy.protocol);
  }
})(this, function(protocol) {
  var IPromise, promise;
  IPromise = protocol.define('IPromise', ['when', 'Regester a callback with a deffered'], ['deliver', 'Resolve a deffered']);
  protocol.extend(IPromise, null, [
    'when', function(deffered, fn) {
      return fn(deffered);
    }
  ], ['deliver', function(deffered, val) {}]);
  protocol.extend(IPromise, "", [
    'when', function(deffered, fn) {
      return fn(deffered);
    }
  ], ['deliver', function(deffered, val) {}]);
  protocol.extend(IPromise, 1, [
    'when', function(deffered, fn) {
      return fn(deffered);
    }
  ], ['deliver', function(deffered, val) {}]);
  protocol.extend(IPromise, Object, [
    'when', function(deffered, fn) {
      return fn(deffered);
    }
  ], ['deliver', function(deffered, val) {}]);
  return promise = {
    IPromise: IPromise
  };
});
